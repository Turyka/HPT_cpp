 1. Lak√°sos rendszer (04-15 √©s 04-22 alapj√°n)

-- T√°bla l√©trehoz√°sa
DROP TABLE IF EXISTS lakas;
CREATE TABLE lakas (
	id INT PRIMARY KEY,
	varos VARCHAR(50),
	terulet INT,
	erkely INT,
	szoba INT,
	ev INT,
	ar INT
);

-- Minta adat
INSERT INTO lakas VALUES (1, 'P√©cs', 50, 10, 2, 2021, 11500000);

-- F√ºggv√©ny: k√∂z√∂s k√∂lts√©g
DELIMITER $$
CREATE FUNCTION kozos_koltseg(terulet INT, erkely INT) RETURNS INT
BEGIN
	RETURN (terulet + erkely / 2) * 300;
END $$
DELIMITER ;

-- F√ºggv√©ny: t√≠pus
DELIMITER $$
CREATE FUNCTION tipus(terulet INT) RETURNS VARCHAR(20)
BEGIN
	IF terulet < 45 THEN
		RETURN 'kicsi';
	ELSEIF terulet > 90 THEN
		RETURN 'nagy';
	ELSE
		RETURN '√°tlagos';
	END IF;
END $$
DELIMITER ;

-- F√ºggv√©ny: kerek√≠t√©s milli√≥ra
DELIMITER $$
CREATE FUNCTION kerekit(ar INT) RETURNS INT
BEGIN
	DECLARE seged INT;
	SET seged = ar MOD 1000000;
	IF seged < 500000 THEN
		RETURN ar - seged;
	ELSE
		RETURN ar - seged + 1000000;
	END IF;
END $$
DELIMITER ;

-- Trigger: ha friss√≠tik az √°rat, logoljuk
DROP TABLE IF EXISTS lakas_log;
CREATE TABLE lakas_log (
	id INT,
	regi INT,
	uj INT,
	datum DATETIME
);

DELIMITER $$
CREATE TRIGGER update_after_lakas
AFTER UPDATE ON lakas
FOR EACH ROW
BEGIN
	IF OLD.ar <> NEW.ar THEN
		INSERT INTO lakas_log VALUES (NEW.id, OLD.ar, NEW.ar, NOW());
	END IF;
END $$
DELIMITER ;

-- Trigger: ha nincs √°r, sz√°moljuk ki
DELIMITER $$
CREATE TRIGGER insert_after_lakas
BEFORE INSERT ON lakas
FOR EACH ROW
BEGIN
	IF NEW.ar = 0 THEN
		SET NEW.ar = NEW.terulet * 500000;
	END IF;
END $$
DELIMITER ;

üê∂ 2. Tulajdonos ‚Äì kutya rendszer (04-22 alapj√°n)

-- Tulajdonos t√°bla
DROP TABLE IF EXISTS tulajdonos;
CREATE TABLE tulajdonos (
	id INT PRIMARY KEY,
	nev VARCHAR(30) NOT NULL,
	varos VARCHAR(30) NOT NULL
);

-- Kutya t√°bla
DROP TABLE IF EXISTS kutya;
CREATE TABLE kutya (
	id INT PRIMARY KEY,
	nev VARCHAR(30) NOT NULL,
	fajta VARCHAR(30) NOT NULL,
	neme CHAR(1),
	kor INT,
	tulajdonos_id INT,
	FOREIGN KEY (tulajdonos_id) REFERENCES tulajdonos(id)
);

-- Kutya log
CREATE TABLE kutya_log (
	id INT,
	regi_tulajdonos INT,
	uj_tulajdonos INT,
	datum DATE
);

-- Trigger: ha neme nem 'K' vagy 'S', legyen 'K'
DELIMITER $$
CREATE TRIGGER nincs_neme
BEFORE INSERT ON kutya
FOR EACH ROW
BEGIN
	IF NEW.neme NOT IN ('K', 'S') THEN
		SET NEW.neme = 'K';
	END IF;
END $$
DELIMITER ;

-- Trigger: tulajdonosv√°lt√°s logol√°sa
DELIMITER $$
CREATE TRIGGER tulaj_valtozas
AFTER UPDATE ON kutya
FOR EACH ROW
BEGIN
	IF OLD.tulajdonos_id <> NEW.tulajdonos_id THEN
		INSERT INTO kutya_log VALUES (NEW.id, OLD.tulajdonos_id, NEW.tulajdonos_id, CURDATE());
	END IF;
END $$
DELIMITER ;

-- Trigger: v√°ros √©s n√©v tiszt√≠t√°sa
DELIMITER $$
CREATE TRIGGER varos_helyes
BEFORE INSERT ON tulajdonos
FOR EACH ROW
BEGIN
	SET NEW.nev = TRIM(UPPER(NEW.nev));
	SET NEW.varos = TRIM(UPPER(NEW.varos));
END $$
DELIMITER ;

üßë‚Äçüè´ 3. Tan√°r ‚Äì szakk√∂r rendszer (04-29 alapj√°n)

-- T√°bl√°k
DROP TABLE IF EXISTS tanar;
DROP TABLE IF EXISTS szakkor;
DROP TABLE IF EXISTS tanar_log;

CREATE TABLE tanar (
	id INT PRIMARY KEY,
	nev VARCHAR(30) NOT NULL,
	tantargy VARCHAR(30) NOT NULL,
	ev INT,
	fizetes INT NOT NULL,
	jutalom INT NOT NULL
);

CREATE TABLE szakkor (
	id INT PRIMARY KEY,
	tantargy VARCHAR(30) NOT NULL,
	ora INT,
	nap VARCHAR(30),
	terem INT,
	tanar_id INT,
	FOREIGN KEY (tanar_id) REFERENCES tanar(id)
);

CREATE TABLE tanar_log (
	regi_tanar_nev VARCHAR(30),
	regi_tanar_id INT,
	uj_tanar_id INT,
	datum DATE
);

-- F√ºggv√©ny: √©ves j√∂vedelem
DELIMITER $$
CREATE FUNCTION eves_jovedelem(fizetes INT, jutalom INT) RETURNS INT
BEGIN
	RETURN (fizetes * 12) + jutalom;
END $$
DELIMITER ;

-- F√ºggv√©ny: jutalom kateg√≥ria
DELIMITER $$
CREATE FUNCTION eves_jutalom(jutalom INT) RETURNS INT
BEGIN
	IF jutalom < 100000 THEN
		RETURN 0;
	ELSEIF jutalom < 200000 THEN
		RETURN 1;
	ELSEIF jutalom < 300000 THEN
		RETURN 2;
	ELSE
		RETURN 3;
	END IF;
END $$
DELIMITER ;

-- Trigger: ha nincs √©v, legyen most + 10
DELIMITER $$
CREATE TRIGGER nincs_ev
BEFORE INSERT ON tanar
FOR EACH ROW
BEGIN
	IF NEW.ev IS NULL THEN
		SET NEW.ev = YEAR(CURDATE()) + 10;
	END IF;
END $$
DELIMITER ;

-- Trigger: h√©tv√©gi nap helyett h√©tf≈ë vagy kedd
DELIMITER $$
CREATE TRIGGER napok_baj
BEFORE INSERT ON szakkor
FOR EACH ROW
BEGIN
	IF NEW.nap IN ('szombat', 'vas√°rnap') THEN
		SET NEW.nap = 'kedd';
	ELSEIF NEW.nap NOT IN ('h√©tf≈ë', 'kedd', 'szerda', 'cs√ºt√∂rt√∂k', 'p√©ntek') THEN
		SET NEW.nap = 'h√©tf≈ë';
	END IF;
END $$
DELIMITER ;

-- Trigger: tant√°rgyt√≥l f√ºgg≈ë √≥rasz√°m
DELIMITER $$
CREATE TRIGGER matek_fizika
BEFORE INSERT ON szakkor
FOR EACH ROW
BEGIN
	IF NEW.tantargy IN ('matek', 'fizika') THEN
		SET NEW.ora = 3;
	ELSE
		SET NEW.ora = 2;
	END IF;
END $$
DELIMITER ;

-- Trigger: tan√°r ID v√°ltoz√°s napl√≥z√°sa
DELIMITER $$
CREATE TRIGGER tanar_valtozas
AFTER UPDATE ON tanar
FOR EACH ROW
BEGIN
	IF OLD.id <> NEW.id THEN
		INSERT INTO tanar_log VALUES (OLD.nev, OLD.id, NEW.id, CURDATE());
	END IF;
END $$
DELIMITER ;